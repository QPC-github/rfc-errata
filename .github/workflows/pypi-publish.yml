name: Publish Python Package

on:
  push:
    branches:
      - main
    paths:
      - Rfc_Errata/**
      - requirements.txt
      - setup.cfg
      - setup.py
    tags:
      - '*'

  workflow_dispatch:
    inputs:
      publish:
        description: 'Create Production Release'
        required: true
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.semver.outputs.next }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Get Next Version
      if: ${{ github.event.inputs.publish == 'true' }}
      id: semver
      uses: ietf-tools/semver-action@v1
      with:
        token: ${{ github.token }}
        branch: main
        
    - name: Set Next Version Env Var
      if: ${{ github.event.inputs.publish == 'true' }}
      run: |
        echo "NEXT_VERSION=$nextStrict" >> $GITHUB_ENV
        
    - name: Create Draft Release
      uses: ncipollo/release-action@v1
      if: ${{ github.event.inputs.publish == 'true' }}
      with:
        prerelease: true
        draft: false
        commit: ${{ github.sha }}
        tag: ${{ env.NEXT_VERSION }}
        name: ${{ env.NEXT_VERSION }}
        body: '*pending*'
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set Build Variables
      run: |
        if [[ $NEXT_VERSION ]]; then
          echo "Using AUTO SEMVER mode: $NEXT_VERSION"
          echo "SHOULD_DEPLOY=true" >> $GITHUB_ENV
          echo "PKG_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "::notice::Release $NEXT_VERSION created using branch $GITHUB_REF_NAME"
        elif [[ "$GITHUB_REF" =~ ^refs/tags/* ]]; then
          echo "Using TAG mode: $GITHUB_REF_NAME"
          echo "SHOULD_DEPLOY=true" >> $GITHUB_ENV
          echo "PKG_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "::notice::Release $GITHUB_REF_NAME created using tag $GITHUB_REF_NAME"
        else
          echo "Using TEST mode: 0.0.1-dev.$GITHUB_RUN_NUMBER"
          echo "SHOULD_DEPLOY=false" >> $GITHUB_ENV
          echo "PKG_VERSION=0.0.1-dev.$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          echo "::notice::Non-production build 0.0.1-dev.$GITHUB_RUN_NUMBER created using branch $GITHUB_REF_NAME"
        fi
    
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        
    - name: Install Python dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip setuptools wheel twine
        pip install build
        sudo apt update
        sudo apt install -y twine
        
    - name: Build Python package
      run: |
        echo "Using version $PKG_VERSION"
        sed -i -r -e "s/^__version__ += '.*'$/__version__ = '$PKG_VERSION'/" Rfc_Errata/__init__.py
        python ./setup.py setopt --command=metadata --option=version --set-value=$PKG_VERSION
        python ./setup.py sdist --dist-dir dist
        
    - name: Publish to Test PyPI
      if: env.SHOULD_DEPLOY != 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: |
        echo "Using repository $TWINE_REPOSITORY_URL"
        twine check dist/*
        twine upload --verbose dist/*
        
    - name: Update CHANGELOG
      id: changelog
      uses: Requarks/changelog-action@v1
      if: env.SHOULD_DEPLOY == 'true'
      with:
        token: ${{ github.token }}
        tag: ${{ env.PKG_VERSION }}
        writeToFile: false
        
    - name: Create Release
      uses: ncipollo/release-action@v1
      if: env.SHOULD_DEPLOY == 'true'
      with:
        allowUpdates: true
        draft: false
        tag: ${{ env.PKG_VERSION }}
        name: ${{ env.PKG_VERSION }}
        body: ${{ steps.changelog.outputs.changes }}
        artifacts: "dist/**"
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v2.3.1
      with:
        name: artifacts
        path: |
          setup.cfg
          Rfc_Errata/__init__.py